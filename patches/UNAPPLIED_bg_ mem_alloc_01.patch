Index: code/cgame/cg_main.c
===================================================================
--- code/cgame/cg_main.c	(revision 1257)
+++ code/cgame/cg_main.c	(working copy)
@@ -2188,6 +2188,8 @@
 	memset(cg_weapons, 0, sizeof(cg_weapons));
 	memset(cg_items, 0, sizeof(cg_items));
 
+	BG_InitMemory();
+
 	cg.clientNum = clientNum;
 	cgs.processedSnapshotNum = serverMessageNum;
 	cgs.serverCommandSequence = serverCommandSequence;
Index: code/game
===================================================================
--- code/game	(revision 1257)
+++ code/game	(working copy)

Property changes on: code/game
___________________________________________________________________
Added: svn:ignore
## -0,0 +1 ##
+g_mem.c
Index: code/game/ai_main.c
===================================================================
--- code/game/ai_main.c	(revision 1257)
+++ code/game/ai_main.c	(working copy)
@@ -1265,7 +1265,13 @@
 	int errnum;
 
 	if (!botstates[client]) {
-		botstates[client] = G_Alloc(sizeof(bot_state_t));
+		if (!BG_CanAlloc(sizeof(bot_state_t))) {
+			// we cannot run BG_Alloc, fail nicely
+			BotAI_Print(PRT_FATAL, "BotAISetupClient: not enough heap memory!\n");
+			return qfalse;
+		}
+		// BG_Alloc will succed or terminate
+		botstates[client] = BG_Alloc(sizeof(bot_state_t));
 	}
 
 	bs = botstates[client];
Index: code/game/bg_alloc.c
===================================================================
--- code/game/bg_alloc.c	(nonexistent)
+++ code/game/bg_alloc.c	(working copy)
@@ -0,0 +1,247 @@
+/*
+=======================================================================================================================================
+Copyright (C) 1999-2010 id Software LLC, a ZeniMax Media company.
+
+This file is part of Spearmint Source Code.
+
+Spearmint Source Code is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
+published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
+
+Spearmint Source Code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with Spearmint Source Code.
+If not, see <http://www.gnu.org/licenses/>.
+
+In addition, Spearmint Source Code is also subject to certain additional terms. You should have received a copy of these additional
+terms immediately following the terms and conditions of the GNU General Public License. If not, please request a copy in writing from
+id Software at the address below.
+
+If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o
+ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.
+=======================================================================================================================================
+*/
+
+#include "../qcommon/q_shared.h"
+#include "bg_public.h"
+#ifdef CGAME
+#define POOLSIZE (256 * 1024)
+#else
+#define POOLSIZE (1024 * 1024)
+#endif
+#define FREEMEMCOOKIE ((int)0xDEADBE3F) // any unlikely to be used value
+#define ROUNDBITS (unsigned int)31 // round to 32 bytes
+
+typedef struct freeMemNode_s {
+	// size of ROUNDBITS
+	int cookie, size; // size includes node (obviously)
+	struct freeMemNode_s *prev, *next;
+} freeMemNode_t;
+
+static char memoryPool[POOLSIZE];
+static freeMemNode_t *freeHead;
+static int freeMem;
+
+/*
+=======================================================================================================================================
+BG_CanAlloc
+
+Returns qtrue if BG_Alloc will succeed, qfalse otherwise.
+=======================================================================================================================================
+*/
+qboolean BG_CanAlloc(unsigned int size) {
+	freeMemNode_t *fmn;
+	int allocsize;
+
+	allocsize = (size + sizeof(int) + ROUNDBITS) & ~ROUNDBITS; // round to 32-byte boundary
+
+	for (fmn = freeHead; fmn; fmn = fmn->next) {
+		if (fmn->cookie != FREEMEMCOOKIE) {
+			// memory curroption
+			return qfalse;
+		}
+
+		if (fmn->size >= allocsize) {
+			// at least one useable block
+			return qtrue;
+		}
+	}
+
+	return qfalse;
+}
+
+/*
+=======================================================================================================================================
+BG_Alloc
+
+Find a free block and allocate. Does two passes, attempts to fill same-sized free slot first.
+=======================================================================================================================================
+*/
+void *BG_Alloc(unsigned int size) {
+	freeMemNode_t *fmn, *prev, *next, *smallest;
+	int allocsize, smallestsize;
+	char *endptr;
+	int *ptr;
+
+	allocsize = (size + sizeof(int) + ROUNDBITS) & ~ROUNDBITS; // round to 32-byte boundary
+	ptr = NULL;
+
+	smallest = NULL;
+	smallestsize = POOLSIZE + 1; // guaranteed not to miss any slots :)
+
+	for (fmn = freeHead; fmn; fmn = fmn->next) {
+		if (fmn->cookie != FREEMEMCOOKIE) {
+			Com_Error(ERR_DROP, "BG_Alloc: Memory corruption detected!");
+		}
+
+		if (fmn->size >= allocsize) {
+			// we've got a block
+			if (fmn->size == allocsize) {
+				// same size, just remove
+				prev = fmn->prev;
+				next = fmn->next;
+
+				if (prev) {
+					prev->next = next; // point previous node to next
+				}
+
+				if (next) {
+					next->prev = prev; // point next node to previous
+				}
+
+				if (fmn == freeHead) {
+					freeHead = next; // set head pointer to next
+				}
+
+				ptr = (int *)fmn;
+				break; // stop the loop, this is fine
+			} else {
+				// keep track of the smallest free slot
+				if (fmn->size < smallestsize) {
+					smallest = fmn;
+					smallestsize = fmn->size;
+				}
+			}
+		}
+	}
+
+	if (!ptr && smallest) {
+		// we found a slot big enough
+		smallest->size -= allocsize;
+		endptr = (char *)smallest + smallest->size;
+		ptr = (int *)endptr;
+	}
+
+	if (ptr) {
+		freeMem -= allocsize;
+		memset(ptr, 0, allocsize);
+		*ptr++ = allocsize; // store a copy of size for deallocation
+		return ((void *)ptr);
+	}
+
+	Com_Error(ERR_DROP, "BG_Alloc: failed on allocation of %i bytes.", size);
+	return (NULL);
+}
+
+/*
+=======================================================================================================================================
+BG_Free
+
+Release allocated memory, add it to the free list.
+=======================================================================================================================================
+*/
+void BG_Free(void *ptr) {
+	freeMemNode_t *fmn;
+	char *freeend;
+	int *freeptr;
+
+	// lets just do this here
+	if (!ptr) {
+		return;
+	}
+
+	freeptr = ptr;
+	freeptr--;
+	freeMem += *freeptr;
+
+	for (fmn = freeHead; fmn; fmn = fmn->next) {
+		freeend = ((char *)fmn) + fmn->size;
+
+		if (freeend == (char *)freeptr) {
+			// released block can be merged to an existing node
+			fmn->size += *freeptr; // add size of node
+			return;
+		}
+	}
+	// no merging, add to head of list
+	fmn = (freeMemNode_t *)freeptr;
+	fmn->size = *freeptr; // set this first to avoid corrupting *freeptr
+	fmn->cookie = FREEMEMCOOKIE;
+	fmn->prev = NULL;
+	fmn->next = freeHead;
+
+	freeHead->prev = fmn;
+	freeHead = fmn;
+}
+
+/*
+=======================================================================================================================================
+BG_InitMemory
+
+Set up the initial node.
+=======================================================================================================================================
+*/
+void BG_InitMemory(void) {
+
+	freeHead = (freeMemNode_t *)memoryPool;
+	freeHead->cookie = FREEMEMCOOKIE;
+	freeHead->size = POOLSIZE;
+	freeHead->next = NULL;
+	freeHead->prev = NULL;
+
+	freeMem = sizeof(memoryPool);
+}
+
+/*
+=======================================================================================================================================
+BG_MemoryInfo
+
+Give a breakdown of memory.
+=======================================================================================================================================
+*/
+void BG_MemoryInfo(void) {
+	freeMemNode_t *fmn = (freeMemNode_t *)memoryPool;
+	freeMemNode_t *end = (freeMemNode_t *)(memoryPool + POOLSIZE);
+	int size, chunks;
+	void *p;
+
+	Com_Printf("  %p-%p: %d out of %d bytes allocated.\n", fmn, end, POOLSIZE - freeMem, POOLSIZE);
+
+	while (fmn < end) {
+		size = chunks = 0;
+		p = fmn;
+
+		while (fmn < end && fmn->cookie == FREEMEMCOOKIE) {
+			size += fmn->size;
+			chunks++;
+			fmn = (freeMemNode_t *)((char *)fmn + fmn->size);
+		}
+
+		if (size) {
+			Com_Printf("  %p: %d bytes free (%d chunks).\n", p, size, chunks);
+		}
+
+		size = chunks = 0;
+		p = fmn;
+
+		while (fmn < end && fmn->cookie != FREEMEMCOOKIE) {
+			size += *(int *)fmn;
+			chunks++;
+			fmn = (freeMemNode_t *)((size_t)fmn + *(int *)fmn);
+		}
+
+		if (size) {
+			Com_Printf("  %p: %d bytes allocated (%d chunks).\n", p, size, chunks);
+		}
+	}
+}
Index: code/game/bg_public.h
===================================================================
--- code/game/bg_public.h	(revision 1257)
+++ code/game/bg_public.h	(working copy)
@@ -691,6 +691,12 @@
 void BG_PlayerStateToEntityStateExtraPolate(playerState_t *ps, entityState_t *s, int time, qboolean snap);
 qboolean BG_PlayerTouchesItem(playerState_t *ps, entityState_t *item, int atTime);
 void SnapVectorTowards(vec3_t v, vec3_t to);
+// bg_alloc.c
+qboolean BG_CanAlloc(unsigned int size);
+void *BG_Alloc(unsigned int size);
+void BG_InitMemory(void);
+void BG_Free(void *ptr);
+void BG_MemoryInfo(void);
 
 #define ARENAS_PER_TIER 4
 
Index: code/game/g_bot.c
===================================================================
--- code/game/g_bot.c	(revision 1257)
+++ code/game/g_bot.c	(working copy)
@@ -104,8 +104,12 @@
 
 			Info_SetValueForKey(info, key, token);
 		}
+
+		if (!BG_CanAlloc(strlen(info) + strlen("\\num\\") + strlen(va("%d", MAX_ARENAS)) + 1)) {
+			break; // not enough memory. Don't even try
+		}
 		// NOTE: extra space for arena number
-		infos[count] = G_Alloc(strlen(info) + strlen("\\num\\") + strlen(va("%d", MAX_ARENAS)) + 1);
+		infos[count] = BG_Alloc(strlen(info) + strlen("\\num\\") + strlen(va("%d", MAX_ARENAS)) + 1);
 
 		if (infos[count]) {
 			strcpy(infos[count], info);
Index: code/game/g_local.h
===================================================================
--- code/game/g_local.h	(revision 1257)
+++ code/game/g_local.h	(working copy)
@@ -440,9 +440,6 @@
 void Team_CheckDroppedItem(gentity_t *dropped);
 qboolean CheckObeliskAttack(gentity_t *obelisk, gentity_t *attacker);
 void ObeliskPain(gentity_t *self, gentity_t *attacker, int damage);
-// g_mem.c
-void *G_Alloc(int size);
-void G_InitMemory(void);
 void Svcmd_GameMem_f(void);
 // g_session.c
 void G_ReadClientSessionData(gclient_t *client);
@@ -507,7 +504,6 @@
 extern vmCvar_t g_forcerespawn;
 extern vmCvar_t g_inactivity;
 extern vmCvar_t g_debugMove;
-extern vmCvar_t g_debugAlloc;
 extern vmCvar_t g_debugDamage;
 extern vmCvar_t g_weaponRespawn;
 extern vmCvar_t g_weaponTeamRespawn;
Index: code/game/g_main.c
===================================================================
--- code/game/g_main.c	(revision 1257)
+++ code/game/g_main.c	(working copy)
@@ -59,7 +59,6 @@
 vmCvar_t g_inactivity;
 vmCvar_t g_debugMove;
 vmCvar_t g_debugDamage;
-vmCvar_t g_debugAlloc;
 vmCvar_t g_weaponRespawn;
 vmCvar_t g_weaponTeamRespawn;
 vmCvar_t g_motd;
@@ -130,7 +129,6 @@
 	{&g_inactivity, "g_inactivity", "0", 0, 0, qtrue},
 	{&g_debugMove, "g_debugMove", "0", 0, 0, qfalse},
 	{&g_debugDamage, "g_debugDamage", "0", 0, 0, qfalse},
-	{&g_debugAlloc, "g_debugAlloc", "0", 0, 0, qfalse},
 	{&g_motd, "g_motd", "", 0, 0, qfalse},
 	{&g_blood, "com_blood", "1", 0, 0, qfalse},
 	{&g_podiumDist, "g_podiumDist", "80", 0, 0, qfalse},
@@ -400,7 +398,7 @@
 
 	G_RegisterCvars();
 	G_ProcessIPBans();
-	G_InitMemory();
+	BG_InitMemory();
 	// set some level globals
 	memset(&level, 0, sizeof(level));
 
Index: code/game/g_mem.c
===================================================================
--- code/game/g_mem.c	(revision 1257)
+++ code/game/g_mem.c	(nonexistent)
@@ -1,70 +0,0 @@
-/*
-=======================================================================================================================================
-Copyright (C) 1999-2010 id Software LLC, a ZeniMax Media company.
-
-This file is part of Spearmint Source Code.
-
-Spearmint Source Code is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
-published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
-
-Spearmint Source Code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with Spearmint Source Code.
-If not, see <http://www.gnu.org/licenses/>.
-
-In addition, Spearmint Source Code is also subject to certain additional terms. You should have received a copy of these additional
-terms immediately following the terms and conditions of the GNU General Public License. If not, please request a copy in writing from
-id Software at the address below.
-
-If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o
-ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.
-=======================================================================================================================================
-*/
-
-#include "g_local.h"
-
-#define POOLSIZE (1024 * 1024)
-
-static char memoryPool[POOLSIZE];
-static int allocPoint;
-
-/*
-=======================================================================================================================================
-G_Alloc
-=======================================================================================================================================
-*/
-void *G_Alloc(int size) {
-	char *p;
-
-	if (g_debugAlloc.integer) {
-		G_Printf("G_Alloc of %i bytes (%i left)\n", size, POOLSIZE - allocPoint - ((size + 31) & ~31));
-	}
-
-	if (allocPoint + size > POOLSIZE) {
-		G_Error("G_Alloc: failed on allocation of %i bytes", size);
-		return NULL;
-	}
-
-	p = &memoryPool[allocPoint];
-	allocPoint += (size + 31) & ~31;
-	return p;
-}
-
-/*
-=======================================================================================================================================
-G_InitMemory
-=======================================================================================================================================
-*/
-void G_InitMemory(void) {
-	allocPoint = 0;
-}
-
-/*
-=======================================================================================================================================
-Svcmd_GameMem_f
-=======================================================================================================================================
-*/
-void Svcmd_GameMem_f(void) {
-	G_Printf("Game memory status: %i out of %i bytes allocated\n", allocPoint, POOLSIZE);
-}
Index: code/game/g_spawn.c
===================================================================
--- code/game/g_spawn.c	(revision 1257)
+++ code/game/g_spawn.c	(working copy)
@@ -311,7 +311,7 @@
 	int i, l;
 
 	l = strlen(string) + 1;
-	newb = G_Alloc(l);
+	newb = BG_Alloc(l);
 	new_p = newb;
 	// turn \n into a real linefeed
 	for (i = 0; i < l; i++) {
Index: code/game/g_svcmds.c
===================================================================
--- code/game/g_svcmds.c	(revision 1257)
+++ code/game/g_svcmds.c	(working copy)
@@ -523,6 +523,15 @@
 	TeleportPlayer(ent, position, angles);
 }
 // Tobias END
+/*
+=======================================================================================================================================
+Svcmd_MemoryInfo_f
+=======================================================================================================================================
+*/
+static void Svcmd_MemoryInfo_f(void) {
+	BG_MemoryInfo();
+}
+
 struct svcmd {
 	char *cmd;
 	qboolean dedicated;
@@ -536,7 +545,7 @@
 	{"botlist", qfalse, Svcmd_BotList_f},
 	{"entitylist", qfalse, Svcmd_EntityList_f},
 	{"forceteam", qfalse, Svcmd_ForceTeam_f},
-	{"gamememory", qfalse, Svcmd_GameMem_f},
+	{"gamememory", qfalse, Svcmd_MemoryInfo_f},
 	{"listip", qfalse, Svcmd_ListIPs_f},
 	{"removeip", qfalse, Svcmd_RemoveIP_f},
 // Tobias DEBUG
Index: Makefile
===================================================================
--- Makefile	(revision 1257)
+++ Makefile	(working copy)
@@ -2389,6 +2389,7 @@
 
 Q3CGOBJ_ = \
   $(B)/$(BASEGAME)/cgame/cg_main.o \
+  $(B)/$(BASEGAME)/cgame/bg_alloc.o \
   $(B)/$(BASEGAME)/cgame/bg_misc.o \
   $(B)/$(BASEGAME)/cgame/bg_pmove.o \
   $(B)/$(BASEGAME)/cgame/bg_slidemove.o \
@@ -2444,6 +2445,7 @@
   $(B)/$(BASEGAME)/game/ai_main.o \
   $(B)/$(BASEGAME)/game/ai_team.o \
   $(B)/$(BASEGAME)/game/ai_vcmd.o \
+  $(B)/$(BASEGAME)/game/bg_alloc.o \
   $(B)/$(BASEGAME)/game/bg_misc.o \
   $(B)/$(BASEGAME)/game/bg_pmove.o \
   $(B)/$(BASEGAME)/game/bg_slidemove.o \
@@ -2456,7 +2458,6 @@
   $(B)/$(BASEGAME)/game/g_cmds.o \
   $(B)/$(BASEGAME)/game/g_combat.o \
   $(B)/$(BASEGAME)/game/g_items.o \
-  $(B)/$(BASEGAME)/game/g_mem.o \
   $(B)/$(BASEGAME)/game/g_misc.o \
   $(B)/$(BASEGAME)/game/g_missile.o \
   $(B)/$(BASEGAME)/game/g_mover.o \
@@ -2494,6 +2495,7 @@
   $(B)/$(BASEGAME)/ui/ui_players.o \
   $(B)/$(BASEGAME)/ui/ui_shared.o \
   \
+  $(B)/$(BASEGAME)/ui/bg_alloc.o \
   $(B)/$(BASEGAME)/ui/bg_misc.o \
   $(B)/$(BASEGAME)/ui/bg_lib.o \
   \
